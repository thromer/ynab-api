"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ynab_api.api_client import ApiClient, Endpoint as _Endpoint
from ynab_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ynab_api.model.categories_response import CategoriesResponse
from ynab_api.model.category_response import CategoryResponse
from ynab_api.model.error_response import ErrorResponse
from ynab_api.model.patch_month_category_wrapper import PatchMonthCategoryWrapper
from ynab_api.model.save_category_response import SaveCategoryResponse


class CategoriesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_categories_endpoint = _Endpoint(
            settings={
                'response_type': (CategoriesResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/categories',
                'operation_id': 'get_categories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'last_knowledge_of_server',
                ],
                'required': [
                    'budget_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'last_knowledge_of_server':
                        (int,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'last_knowledge_of_server': 'last_knowledge_of_server',
                },
                'location_map': {
                    'budget_id': 'path',
                    'last_knowledge_of_server': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_category_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (CategoryResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/categories/{category_id}',
                'operation_id': 'get_category_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'category_id',
                ],
                'required': [
                    'budget_id',
                    'category_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'category_id':
                        (str,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'category_id': 'category_id',
                },
                'location_map': {
                    'budget_id': 'path',
                    'category_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_month_category_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (CategoryResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/months/{month}/categories/{category_id}',
                'operation_id': 'get_month_category_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'month',
                    'category_id',
                ],
                'required': [
                    'budget_id',
                    'month',
                    'category_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'month':
                        (date,),
                    'category_id':
                        (str,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'month': 'month',
                    'category_id': 'category_id',
                },
                'location_map': {
                    'budget_id': 'path',
                    'month': 'path',
                    'category_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_month_category_endpoint = _Endpoint(
            settings={
                'response_type': (SaveCategoryResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/months/{month}/categories/{category_id}',
                'operation_id': 'update_month_category',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'month',
                    'category_id',
                    'data',
                ],
                'required': [
                    'budget_id',
                    'month',
                    'category_id',
                    'data',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'month':
                        (date,),
                    'category_id':
                        (str,),
                    'data':
                        (PatchMonthCategoryWrapper,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'month': 'month',
                    'category_id': 'category_id',
                },
                'location_map': {
                    'budget_id': 'path',
                    'month': 'path',
                    'category_id': 'path',
                    'data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_categories(
        self,
        budget_id,
        **kwargs
    ):
        """List categories  # noqa: E501

        Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_categories(budget_id, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).

        Keyword Args:
            last_knowledge_of_server (int): The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CategoriesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        return self.get_categories_endpoint.call_with_http_info(**kwargs)

    def get_category_by_id(
        self,
        budget_id,
        category_id,
        **kwargs
    ):
        """Single category  # noqa: E501

        Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_category_by_id(budget_id, category_id, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            category_id (str): The id of the category

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CategoryResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['category_id'] = \
            category_id
        return self.get_category_by_id_endpoint.call_with_http_info(**kwargs)

    def get_month_category_by_id(
        self,
        budget_id,
        month,
        category_id,
        **kwargs
    ):
        """Single category for a specific budget month  # noqa: E501

        Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_month_category_by_id(budget_id, month, category_id, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            month (date): The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
            category_id (str): The id of the category

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CategoryResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['month'] = \
            month
        kwargs['category_id'] = \
            category_id
        return self.get_month_category_by_id_endpoint.call_with_http_info(**kwargs)

    def update_month_category(
        self,
        budget_id,
        month,
        category_id,
        data,
        **kwargs
    ):
        """Update a category for a specific month  # noqa: E501

        Update a category for a specific month.  Only `budgeted` amount can be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_month_category(budget_id, month, category_id, data, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            month (date): The budget month in ISO format (e.g. 2016-12-01) (\"current\" can also be used to specify the current calendar month (UTC))
            category_id (str): The id of the category
            data (PatchMonthCategoryWrapper): The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SaveCategoryResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['month'] = \
            month
        kwargs['category_id'] = \
            category_id
        kwargs['data'] = \
            data
        return self.update_month_category_endpoint.call_with_http_info(**kwargs)

