"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ynab_api.api_client import ApiClient, Endpoint as _Endpoint
from ynab_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ynab_api.model.error_response import ErrorResponse
from ynab_api.model.hybrid_transactions_response import HybridTransactionsResponse
from ynab_api.model.patch_transactions_wrapper import PatchTransactionsWrapper
from ynab_api.model.post_transactions_wrapper import PostTransactionsWrapper
from ynab_api.model.put_transaction_wrapper import PutTransactionWrapper
from ynab_api.model.save_transactions_response import SaveTransactionsResponse
from ynab_api.model.transaction_response import TransactionResponse
from ynab_api.model.transactions_import_response import TransactionsImportResponse
from ynab_api.model.transactions_response import TransactionsResponse


class TransactionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (SaveTransactionsResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/transactions',
                'operation_id': 'create_transaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'data',
                ],
                'required': [
                    'budget_id',
                    'data',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'data':
                        (PostTransactionsWrapper,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                },
                'location_map': {
                    'budget_id': 'path',
                    'data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/transactions/{transaction_id}',
                'operation_id': 'delete_transaction',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'transaction_id',
                ],
                'required': [
                    'budget_id',
                    'transaction_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'transaction_id':
                        (str,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'transaction_id': 'transaction_id',
                },
                'location_map': {
                    'budget_id': 'path',
                    'transaction_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transaction_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/transactions/{transaction_id}',
                'operation_id': 'get_transaction_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'transaction_id',
                ],
                'required': [
                    'budget_id',
                    'transaction_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'transaction_id':
                        (str,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'transaction_id': 'transaction_id',
                },
                'location_map': {
                    'budget_id': 'path',
                    'transaction_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/transactions',
                'operation_id': 'get_transactions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'since_date',
                    'type',
                    'last_knowledge_of_server',
                ],
                'required': [
                    'budget_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "UNCATEGORIZED": "uncategorized",
                        "UNAPPROVED": "unapproved"
                    },
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'since_date':
                        (date,),
                    'type':
                        (str,),
                    'last_knowledge_of_server':
                        (int,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'since_date': 'since_date',
                    'type': 'type',
                    'last_knowledge_of_server': 'last_knowledge_of_server',
                },
                'location_map': {
                    'budget_id': 'path',
                    'since_date': 'query',
                    'type': 'query',
                    'last_knowledge_of_server': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transactions_by_account_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/accounts/{account_id}/transactions',
                'operation_id': 'get_transactions_by_account',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'account_id',
                    'since_date',
                    'type',
                    'last_knowledge_of_server',
                ],
                'required': [
                    'budget_id',
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "UNCATEGORIZED": "uncategorized",
                        "UNAPPROVED": "unapproved"
                    },
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'account_id':
                        (str,),
                    'since_date':
                        (date,),
                    'type':
                        (str,),
                    'last_knowledge_of_server':
                        (int,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'account_id': 'account_id',
                    'since_date': 'since_date',
                    'type': 'type',
                    'last_knowledge_of_server': 'last_knowledge_of_server',
                },
                'location_map': {
                    'budget_id': 'path',
                    'account_id': 'path',
                    'since_date': 'query',
                    'type': 'query',
                    'last_knowledge_of_server': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transactions_by_category_endpoint = _Endpoint(
            settings={
                'response_type': (HybridTransactionsResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/categories/{category_id}/transactions',
                'operation_id': 'get_transactions_by_category',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'category_id',
                    'since_date',
                    'type',
                    'last_knowledge_of_server',
                ],
                'required': [
                    'budget_id',
                    'category_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "UNCATEGORIZED": "uncategorized",
                        "UNAPPROVED": "unapproved"
                    },
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'category_id':
                        (str,),
                    'since_date':
                        (date,),
                    'type':
                        (str,),
                    'last_knowledge_of_server':
                        (int,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'category_id': 'category_id',
                    'since_date': 'since_date',
                    'type': 'type',
                    'last_knowledge_of_server': 'last_knowledge_of_server',
                },
                'location_map': {
                    'budget_id': 'path',
                    'category_id': 'path',
                    'since_date': 'query',
                    'type': 'query',
                    'last_knowledge_of_server': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transactions_by_payee_endpoint = _Endpoint(
            settings={
                'response_type': (HybridTransactionsResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/payees/{payee_id}/transactions',
                'operation_id': 'get_transactions_by_payee',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'payee_id',
                    'since_date',
                    'type',
                    'last_knowledge_of_server',
                ],
                'required': [
                    'budget_id',
                    'payee_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('type',): {

                        "UNCATEGORIZED": "uncategorized",
                        "UNAPPROVED": "unapproved"
                    },
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'payee_id':
                        (str,),
                    'since_date':
                        (date,),
                    'type':
                        (str,),
                    'last_knowledge_of_server':
                        (int,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'payee_id': 'payee_id',
                    'since_date': 'since_date',
                    'type': 'type',
                    'last_knowledge_of_server': 'last_knowledge_of_server',
                },
                'location_map': {
                    'budget_id': 'path',
                    'payee_id': 'path',
                    'since_date': 'query',
                    'type': 'query',
                    'last_knowledge_of_server': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.import_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsImportResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/transactions/import',
                'operation_id': 'import_transactions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                ],
                'required': [
                    'budget_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                },
                'location_map': {
                    'budget_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/transactions/{transaction_id}',
                'operation_id': 'update_transaction',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'transaction_id',
                    'data',
                ],
                'required': [
                    'budget_id',
                    'transaction_id',
                    'data',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'transaction_id':
                        (str,),
                    'data':
                        (PutTransactionWrapper,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                    'transaction_id': 'transaction_id',
                },
                'location_map': {
                    'budget_id': 'path',
                    'transaction_id': 'path',
                    'data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (SaveTransactionsResponse,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/budgets/{budget_id}/transactions',
                'operation_id': 'update_transactions',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'budget_id',
                    'data',
                ],
                'required': [
                    'budget_id',
                    'data',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'budget_id':
                        (str,),
                    'data':
                        (PatchTransactionsWrapper,),
                },
                'attribute_map': {
                    'budget_id': 'budget_id',
                },
                'location_map': {
                    'budget_id': 'path',
                    'data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_transaction(
        self,
        budget_id,
        data,
        **kwargs
    ):
        """Create a single transaction or multiple transactions  # noqa: E501

        Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_transaction(budget_id, data, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            data (PostTransactionsWrapper): The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SaveTransactionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['data'] = \
            data
        return self.create_transaction_endpoint.call_with_http_info(**kwargs)

    def delete_transaction(
        self,
        budget_id,
        transaction_id,
        **kwargs
    ):
        """Deletes an existing transaction  # noqa: E501

        Deletes a transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_transaction(budget_id, transaction_id, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            transaction_id (str): The id of the transaction

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['transaction_id'] = \
            transaction_id
        return self.delete_transaction_endpoint.call_with_http_info(**kwargs)

    def get_transaction_by_id(
        self,
        budget_id,
        transaction_id,
        **kwargs
    ):
        """Single transaction  # noqa: E501

        Returns a single transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_by_id(budget_id, transaction_id, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            transaction_id (str): The id of the transaction

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['transaction_id'] = \
            transaction_id
        return self.get_transaction_by_id_endpoint.call_with_http_info(**kwargs)

    def get_transactions(
        self,
        budget_id,
        **kwargs
    ):
        """List transactions  # noqa: E501

        Returns budget transactions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions(budget_id, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).

        Keyword Args:
            since_date (date): If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).. [optional]
            type (str): If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.. [optional]
            last_knowledge_of_server (int): The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        return self.get_transactions_endpoint.call_with_http_info(**kwargs)

    def get_transactions_by_account(
        self,
        budget_id,
        account_id,
        **kwargs
    ):
        """List account transactions  # noqa: E501

        Returns all transactions for a specified account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions_by_account(budget_id, account_id, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            account_id (str): The id of the account

        Keyword Args:
            since_date (date): If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).. [optional]
            type (str): If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.. [optional]
            last_knowledge_of_server (int): The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['account_id'] = \
            account_id
        return self.get_transactions_by_account_endpoint.call_with_http_info(**kwargs)

    def get_transactions_by_category(
        self,
        budget_id,
        category_id,
        **kwargs
    ):
        """List category transactions  # noqa: E501

        Returns all transactions for a specified category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions_by_category(budget_id, category_id, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            category_id (str): The id of the category

        Keyword Args:
            since_date (date): If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).. [optional]
            type (str): If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.. [optional]
            last_knowledge_of_server (int): The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            HybridTransactionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['category_id'] = \
            category_id
        return self.get_transactions_by_category_endpoint.call_with_http_info(**kwargs)

    def get_transactions_by_payee(
        self,
        budget_id,
        payee_id,
        **kwargs
    ):
        """List payee transactions  # noqa: E501

        Returns all transactions for a specified payee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions_by_payee(budget_id, payee_id, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            payee_id (str): The id of the payee

        Keyword Args:
            since_date (date): If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).. [optional]
            type (str): If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.. [optional]
            last_knowledge_of_server (int): The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            HybridTransactionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['payee_id'] = \
            payee_id
        return self.get_transactions_by_payee_endpoint.call_with_http_info(**kwargs)

    def import_transactions(
        self,
        budget_id,
        **kwargs
    ):
        """Import transactions  # noqa: E501

        Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking \"Import\" on each account in the web application or tapping the \"New Transactions\" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.import_transactions(budget_id, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsImportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        return self.import_transactions_endpoint.call_with_http_info(**kwargs)

    def update_transaction(
        self,
        budget_id,
        transaction_id,
        data,
        **kwargs
    ):
        """Updates an existing transaction  # noqa: E501

        Updates a single transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_transaction(budget_id, transaction_id, data, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            transaction_id (str): The id of the transaction
            data (PutTransactionWrapper): The transaction to update

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['transaction_id'] = \
            transaction_id
        kwargs['data'] = \
            data
        return self.update_transaction_endpoint.call_with_http_info(**kwargs)

    def update_transactions(
        self,
        budget_id,
        data,
        **kwargs
    ):
        """Update multiple transactions  # noqa: E501

        Updates multiple transactions, by `id` or `import_id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_transactions(budget_id, data, async_req=True)
        >>> result = thread.get()

        Args:
            budget_id (str): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
            data (PatchTransactionsWrapper): The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by their `import_id`. If an `id` is specified, it will always be used for lookup.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SaveTransactionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['budget_id'] = \
            budget_id
        kwargs['data'] = \
            data
        return self.update_transactions_endpoint.call_with_http_info(**kwargs)

